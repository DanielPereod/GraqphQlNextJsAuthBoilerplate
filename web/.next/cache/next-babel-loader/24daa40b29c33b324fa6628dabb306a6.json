{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/components/FormInput.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FormControl, FormLabel, Input, FormErrorMessage, InputGroup, Button, Icon, InputRightElement, Box } from \"@chakra-ui/react\";\nimport { Field } from \"formik\";\nimport React, { useState } from \"react\";\nimport { ViewOffIcon } from \"@chakra-ui/icons\";\n\nconst validateUsername = value => {\n  let error;\n\n  if (!value) {\n    error = \"Username is required\";\n  } else if (value !== \"Naruto\") {\n    error = \"Jeez! You're not a fan ðŸ˜±\";\n  }\n};\n\nconst FormWrapper = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(Box, {\n  mb: \"1em\",\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 33,\n  columnNumber: 39\n}, this);\n\nexport const FormInput = ({\n  name,\n  label,\n  placeholder,\n  type,\n  required\n}) => /*#__PURE__*/_jsxDEV(FormWrapper, {\n  children: /*#__PURE__*/_jsxDEV(Field, {\n    name: name,\n    children: ({\n      field,\n      form\n    }) => /*#__PURE__*/_jsxDEV(FormControl, {\n      isInvalid: form.errors[name] && form.touched[name],\n      isRequired: required,\n      children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n        htmlFor: name,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread({}, field), {}, {\n        type: type,\n        id: name,\n        placeholder: placeholder\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n        children: form.errors[name]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 42,\n  columnNumber: 3\n}, this);\nexport const FormInputPassword = ({\n  name,\n  label,\n  placeholder,\n  type,\n  required\n}) => {\n  const {\n    0: showPassword,\n    1: setShowPassword\n  } = useState(false);\n\n  const handlePasswordVisibility = () => setShowPassword(prevState => !prevState);\n\n  return /*#__PURE__*/_jsxDEV(FormWrapper, {\n    children: /*#__PURE__*/_jsxDEV(Field, {\n      name: name,\n      children: ({\n        field,\n        form\n      }) => /*#__PURE__*/_jsxDEV(FormControl, {\n        isInvalid: form.errors[name] && form.touched[name],\n        isRequired: required,\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          htmlFor: name,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n          children: [/*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread({}, field), {}, {\n            type: showPassword ? \"text\" : \"password\",\n            id: name,\n            placeholder: placeholder\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InputRightElement, {\n            width: \"3rem\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              h: \"1.5rem\",\n              size: \"sm\",\n              onClick: handlePasswordVisibility,\n              children: showPassword ? /*#__PURE__*/_jsxDEV(Icon, {\n                as: ViewOffIcon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(Icon, {\n                as: ViewOffIcon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n          children: form.errors[name]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/components/FormInput.tsx"],"names":["FormControl","FormLabel","Input","FormErrorMessage","InputGroup","Button","Icon","InputRightElement","Box","Field","React","useState","ViewOffIcon","validateUsername","value","error","FormWrapper","children","FormInput","name","label","placeholder","type","required","field","form","errors","touched","FormInputPassword","showPassword","setShowPassword","handlePasswordVisibility","prevState"],"mappings":"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","sourcesContent":["import {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormErrorMessage,\r\n  InputGroup,\r\n  Button,\r\n  Icon,\r\n  InputRightElement,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { Field } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\r\n\r\ninterface Props {\r\n  name: string;\r\n  label: string;\r\n  placeholder: string;\r\n  type: string;\r\n  required: boolean;\r\n}\r\n\r\nconst validateUsername = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = \"Username is required\";\r\n  } else if (value !== \"Naruto\") {\r\n    error = \"Jeez! You're not a fan ðŸ˜±\";\r\n  }\r\n};\r\n\r\nconst FormWrapper = ({ children }) => <Box mb={\"1em\"}>{children}</Box>;\r\n\r\nexport const FormInput = ({\r\n  name,\r\n  label,\r\n  placeholder,\r\n  type,\r\n  required,\r\n}: Props) => (\r\n  <FormWrapper>\r\n    <Field name={name}>\r\n      {({ field, form }) => (\r\n        <FormControl\r\n          isInvalid={form.errors[name] && form.touched[name]}\r\n          isRequired={required}\r\n        >\r\n          <FormLabel htmlFor={name}>{label}</FormLabel>\r\n          <Input {...field} type={type} id={name} placeholder={placeholder} />\r\n          <FormErrorMessage>{form.errors[name]}</FormErrorMessage>\r\n        </FormControl>\r\n      )}\r\n    </Field>\r\n  </FormWrapper>\r\n);\r\n\r\nexport const FormInputPassword = ({\r\n  name,\r\n  label,\r\n  placeholder,\r\n  type,\r\n  required,\r\n}: Props) => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const handlePasswordVisibility = () =>\r\n    setShowPassword((prevState) => !prevState);\r\n  return (\r\n    <FormWrapper>\r\n      <Field name={name}>\r\n        {({ field, form }) => (\r\n          <FormControl\r\n            isInvalid={form.errors[name] && form.touched[name]}\r\n            isRequired={required}\r\n          >\r\n            <FormLabel htmlFor={name}>{label}</FormLabel>\r\n\r\n            <InputGroup>\r\n              <Input\r\n                {...field}\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                id={name}\r\n                placeholder={placeholder}\r\n              />\r\n              <InputRightElement width=\"3rem\">\r\n                <Button h=\"1.5rem\" size=\"sm\" onClick={handlePasswordVisibility}>\r\n                  {showPassword ? (\r\n                    <Icon as={ViewOffIcon} />\r\n                  ) : (\r\n                    <Icon as={ViewOffIcon} />\r\n                  )}\r\n                </Button>\r\n              </InputRightElement>\r\n            </InputGroup>\r\n            <FormErrorMessage>{form.errors[name]}</FormErrorMessage>\r\n          </FormControl>\r\n        )}\r\n      </Field>\r\n    </FormWrapper>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}