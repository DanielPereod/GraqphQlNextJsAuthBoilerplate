{"ast":null,"code":"import _regeneratorRuntime from \"/mnt/c/Users/Daniel/Code/Projects/GraqphQlNextJsAuthBoilerplate/web/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/mnt/c/Users/Daniel/Code/Projects/GraqphQlNextJsAuthBoilerplate/web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/mnt/c/Users/Daniel/Code/Projects/GraqphQlNextJsAuthBoilerplate/web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/mnt/c/Users/Daniel/Code/Projects/GraqphQlNextJsAuthBoilerplate/web/pages/auth/register.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Button } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { FormInput, FormInputPassword } from \"../../components/FormInput\";\nimport { AuthFormLayout } from \"../../components/layouts/authFormLayout\";\nimport { validateEmail, validatePassword, validatePasswordRepeat, validateUsername } from \"../../components/validations/validateUsername\";\nimport { useRegisterMutation } from \"../../graphql/generated\";\nimport { clientOptions } from \"../../utils/createClient\";\n\nvar Register = function Register() {\n  _s();\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 2),\n      fetching = _useRegisterMutation2[0].fetching,\n      register = _useRegisterMutation2[1];\n\n  var router = useRouter();\n\n  var sendData = function sendData() {};\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      repeat_password: \"\"\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref) {\n        var setSubmitting;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setSubmitting = _ref.setSubmitting;\n                _context.prev = 1;\n                _context.next = 4;\n                return register({\n                  username: values.username,\n                  email: values.email,\n                  password: values.password\n                });\n\n              case 4:\n                router.push(\"/\");\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                console.log(_context.t0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 7]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    children: function children(_ref3) {\n      var isSubmitting = _ref3.isSubmitting,\n          values = _ref3.values;\n      return /*#__PURE__*/_jsxDEV(AuthFormLayout, {\n        title: \"Registro\",\n        type: \"signup\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(FormInput, {\n            name: \"username\",\n            type: \"text\",\n            label: \"Usuario\",\n            placeholder: \"Inserta tu usuario\",\n            required: true,\n            validation: validateUsername\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(FormInput, {\n            name: \"email\",\n            type: \"text\",\n            label: \"Email\",\n            placeholder: \"Inserta tu email\",\n            required: true,\n            validation: validateEmail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(FormInputPassword, {\n            name: \"password\",\n            type: \"password\",\n            label: \"Contrase\\xF1a\",\n            placeholder: \"Inserta tu contrase\\xF1a\",\n            required: true,\n            validation: validatePassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(FormInputPassword, {\n            name: \"repeat_password\",\n            type: \"password\",\n            label: \"Reptetir contrase\\xF1a\",\n            placeholder: \"Repite tu contrase\\xF1a\",\n            required: true,\n            validation: function validation() {\n              return validatePasswordRepeat(values.password, values.repeat_password);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"xl\",\n            mt: 4,\n            isFullWidth: true,\n            isLoading: isSubmitting,\n            type: \"submit\",\n            children: \"Crear cuenta\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Register, \"LqlABRz7fIxxp26nDSpcnrMuFno=\", false, function () {\n  return [useRegisterMutation, useRouter];\n});\n\n_c = Register;\nexport default withUrqlClient(clientOptions, {\n  ssr: false\n})(Register);\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/mnt/c/Users/Daniel/Code/Projects/GraqphQlNextJsAuthBoilerplate/web/pages/auth/register.tsx"],"names":["Button","Form","Formik","withUrqlClient","useRouter","React","FormInput","FormInputPassword","AuthFormLayout","validateEmail","validatePassword","validatePasswordRepeat","validateUsername","useRegisterMutation","clientOptions","Register","fetching","register","router","sendData","username","email","password","repeat_password","values","setSubmitting","push","console","log","isSubmitting","ssr"],"mappings":"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","sourcesContent":["import { Box, Button, Link, Text } from \"@chakra-ui/react\";\r\nimport { Form, Formik, FormikHelpers } from \"formik\";\r\nimport { withUrqlClient } from \"next-urql\";\r\nimport { useRouter } from \"next/router\";\r\nimport React from \"react\";\r\nimport { FormInput, FormInputPassword } from \"../../components/FormInput\";\r\nimport { AuthFormLayout } from \"../../components/layouts/authFormLayout\";\r\nimport {\r\n  validateEmail,\r\n  validatePassword,\r\n  validatePasswordRepeat,\r\n  validateUsername,\r\n} from \"../../components/validations/validateUsername\";\r\nimport { useRegisterMutation } from \"../../graphql/generated\";\r\nimport { clientOptions } from \"../../utils/createClient\";\r\n\r\ninterface RegisterValues {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  repeat_password: string;\r\n}\r\n\r\nconst Register = () => {\r\n  const [{ fetching }, register] = useRegisterMutation();\r\n  const router = useRouter();\r\n  const sendData = () => {};\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        repeat_password: \"\",\r\n      }}\r\n      onSubmit={async (\r\n        values: RegisterValues,\r\n        { setSubmitting }: FormikHelpers<RegisterValues>\r\n      ) => {\r\n        try {\r\n          await register({\r\n            username: values.username,\r\n            email: values.email,\r\n            password: values.password,\r\n          });\r\n          router.push(\"/\");\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }}\r\n    >\r\n      {({ isSubmitting, values }) => (\r\n        <AuthFormLayout title=\"Registro\" type=\"signup\">\r\n          <Form>\r\n            <FormInput\r\n              name=\"username\"\r\n              type=\"text\"\r\n              label=\"Usuario\"\r\n              placeholder=\"Inserta tu usuario\"\r\n              required={true}\r\n              validation={validateUsername}\r\n            />\r\n\r\n            <FormInput\r\n              name=\"email\"\r\n              type=\"text\"\r\n              label=\"Email\"\r\n              placeholder=\"Inserta tu email\"\r\n              required={true}\r\n              validation={validateEmail}\r\n            />\r\n            <FormInputPassword\r\n              name=\"password\"\r\n              type=\"password\"\r\n              label=\"Contraseña\"\r\n              placeholder=\"Inserta tu contraseña\"\r\n              required={true}\r\n              validation={validatePassword}\r\n            />\r\n\r\n            <FormInputPassword\r\n              name=\"repeat_password\"\r\n              type=\"password\"\r\n              label=\"Reptetir contraseña\"\r\n              placeholder=\"Repite tu contraseña\"\r\n              required={true}\r\n              validation={() =>\r\n                validatePasswordRepeat(values.password, values.repeat_password)\r\n              }\r\n            />\r\n\r\n            <Button\r\n              size=\"xl\"\r\n              mt={4}\r\n              isFullWidth\r\n              isLoading={isSubmitting}\r\n              type=\"submit\"\r\n            >\r\n              Crear cuenta\r\n            </Button>\r\n          </Form>\r\n        </AuthFormLayout>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default withUrqlClient(clientOptions, { ssr: false })(Register);\r\n"]},"metadata":{},"sourceType":"module"}