{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/components/FormInput.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FormControl, FormLabel, Input, FormErrorMessage } from \"@chakra-ui/react\";\nimport { Field } from \"formik\";\nimport React from \"react\";\n\nconst FormInput = ({\n  name,\n  label,\n  placeholder,\n  type\n}) => /*#__PURE__*/_jsxDEV(Field, {\n  name: name,\n  children: ({\n    field,\n    form\n  }) => /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: form.errors[name] && form.touched[name],\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread({}, field), {}, {\n      type: type,\n      id: name,\n      placeholder: placeholder\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: form.errors[name]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 18,\n  columnNumber: 3\n}, this);\n\nexport default FormInput;","map":{"version":3,"sources":["/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/components/FormInput.tsx"],"names":["FormControl","FormLabel","Input","FormErrorMessage","Field","React","FormInput","name","label","placeholder","type","field","form","errors","touched"],"mappings":";;;;;;;;;AAAA,SACEA,WADF,EAEEC,SAFF,EAGEC,KAHF,EAIEC,gBAJF,QAKO,kBALP;AAMA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AASA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,WAAf;AAA4BC,EAAAA;AAA5B,CAAD,kBAChB,QAAC,KAAD;AAAO,EAAA,IAAI,EAAEH,IAAb;AAAA,YACG,CAAC;AAAEI,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,kBACC,QAAC,WAAD;AAAa,IAAA,SAAS,EAAEA,IAAI,CAACC,MAAL,CAAYN,IAAZ,KAAqBK,IAAI,CAACE,OAAL,CAAaP,IAAb,CAA7C;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEA,IAApB;AAAA,gBAA2BC;AAA3B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD,kCAAWG,KAAX;AAAkB,MAAA,IAAI,EAAED,IAAxB;AAA8B,MAAA,EAAE,EAAEH,IAAlC;AAAwC,MAAA,WAAW,EAAEE;AAArD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,gBAAD;AAAA,gBAAmBG,IAAI,CAACC,MAAL,CAAYN,IAAZ;AAAnB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,QADF;;AAYA,eAAeD,SAAf","sourcesContent":["import {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormErrorMessage,\r\n} from \"@chakra-ui/react\";\r\nimport { Field } from \"formik\";\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n  name: string;\r\n  label: string;\r\n  placeholder: string;\r\n  type: string;\r\n}\r\n\r\nconst FormInput = ({ name, label, placeholder, type }: Props) => (\r\n  <Field name={name}>\r\n    {({ field, form }) => (\r\n      <FormControl isInvalid={form.errors[name] && form.touched[name]}>\r\n        <FormLabel htmlFor={name}>{label}</FormLabel>\r\n        <Input {...field} type={type} id={name} placeholder={placeholder} />\r\n        <FormErrorMessage>{form.errors[name]}</FormErrorMessage>\r\n      </FormControl>\r\n    )}\r\n  </Field>\r\n);\r\n\r\nexport default FormInput;\r\n"]},"metadata":{},"sourceType":"module"}