{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/components/FormInput.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FormControl, FormLabel, Input, FormErrorMessage, InputGroup, InputRightElement } from \"@chakra-ui/react\";\nimport { Field } from \"formik\";\nimport React, { useState } from \"react\";\nexport const FormInput = ({\n  name,\n  label,\n  placeholder,\n  type,\n  children\n}) => /*#__PURE__*/_jsxDEV(Field, {\n  name: name,\n  children: ({\n    field,\n    form\n  }) => /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: form.errors[name] && form.touched[name],\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread({}, field), {}, {\n      type: type,\n      id: name,\n      placeholder: placeholder\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), children, /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: form.errors[name]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 30,\n  columnNumber: 3\n}, this);\nexport const FormInputPassword = ({\n  name,\n  label,\n  placeholder,\n  type\n}) => {\n  const {\n    0: showPassword,\n    1: setShowPassword\n  } = useState(false);\n\n  const handlePasswordVisibility = () => setShowPassword(prevState => !prevState);\n\n  return /*#__PURE__*/_jsxDEV(FormInput, {\n    name: name,\n    label: label,\n    placeholder: placeholder,\n    type: showPassword ? \"text\" : \"password\",\n    children: /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: /*#__PURE__*/_jsxDEV(InputRightElement, {\n        width: \"3rem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/components/FormInput.tsx"],"names":["FormControl","FormLabel","Input","FormErrorMessage","InputGroup","InputRightElement","Field","React","useState","FormInput","name","label","placeholder","type","children","field","form","errors","touched","FormInputPassword","showPassword","setShowPassword","handlePasswordVisibility","prevState"],"mappings":";;;;;;;;;AAAA,SACEA,WADF,EAEEC,SAFF,EAGEC,KAHF,EAIEC,gBAJF,EAKEC,UALF,EAQEC,iBARF,QASO,kBATP;AAUA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAWA,OAAO,MAAMC,SAAS,GAAG,CAAC;AACxBC,EAAAA,IADwB;AAExBC,EAAAA,KAFwB;AAGxBC,EAAAA,WAHwB;AAIxBC,EAAAA,IAJwB;AAKxBC,EAAAA;AALwB,CAAD,kBAOvB,QAAC,KAAD;AAAO,EAAA,IAAI,EAAEJ,IAAb;AAAA,YACG,CAAC;AAAEK,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,kBACC,QAAC,WAAD;AAAa,IAAA,SAAS,EAAEA,IAAI,CAACC,MAAL,CAAYP,IAAZ,KAAqBM,IAAI,CAACE,OAAL,CAAaR,IAAb,CAA7C;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEA,IAApB;AAAA,gBAA2BC;AAA3B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD,kCAAWI,KAAX;AAAkB,MAAA,IAAI,EAAEF,IAAxB;AAA8B,MAAA,EAAE,EAAEH,IAAlC;AAAwC,MAAA,WAAW,EAAEE;AAArD;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGE,QAHH,eAIE,QAAC,gBAAD;AAAA,gBAAmBE,IAAI,CAACC,MAAL,CAAYP,IAAZ;AAAnB;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,QAPK;AAmBP,OAAO,MAAMS,iBAAiB,GAAG,CAAC;AAChCT,EAAAA,IADgC;AAEhCC,EAAAA,KAFgC;AAGhCC,EAAAA,WAHgC;AAIhCC,EAAAA;AAJgC,CAAD,KAKpB;AACX,QAAM;AAAA,OAACO,YAAD;AAAA,OAAeC;AAAf,MAAkCb,QAAQ,CAAC,KAAD,CAAhD;;AACA,QAAMc,wBAAwB,GAAG,MAC/BD,eAAe,CAAEE,SAAD,IAAe,CAACA,SAAjB,CADjB;;AAGA,sBACE,QAAC,SAAD;AACE,IAAA,IAAI,EAAEb,IADR;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,IAAI,EAAEQ,YAAY,GAAG,MAAH,GAAY,UAJhC;AAAA,2BAME,QAAC,UAAD;AAAA,6BACE,QAAC,iBAAD;AAAmB,QAAA,KAAK,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAtBM","sourcesContent":["import {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormErrorMessage,\r\n  InputGroup,\r\n  Button,\r\n  Icon,\r\n  InputRightElement,\r\n} from \"@chakra-ui/react\";\r\nimport { Field } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\r\n\r\ninterface Props {\r\n  name: string;\r\n  label: string;\r\n  placeholder: string;\r\n  type: string;\r\n  children?: Element;\r\n}\r\n\r\nexport const FormInput = ({\r\n  name,\r\n  label,\r\n  placeholder,\r\n  type,\r\n  children,\r\n}: Props) => (\r\n  <Field name={name}>\r\n    {({ field, form }) => (\r\n      <FormControl isInvalid={form.errors[name] && form.touched[name]}>\r\n        <FormLabel htmlFor={name}>{label}</FormLabel>\r\n        <Input {...field} type={type} id={name} placeholder={placeholder} />\r\n        {children}\r\n        <FormErrorMessage>{form.errors[name]}</FormErrorMessage>\r\n      </FormControl>\r\n    )}\r\n  </Field>\r\n);\r\n\r\nexport const FormInputPassword = ({\r\n  name,\r\n  label,\r\n  placeholder,\r\n  type,\r\n}: Props) => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const handlePasswordVisibility = () =>\r\n    setShowPassword((prevState) => !prevState);\r\n\r\n  return (\r\n    <FormInput\r\n      name={name}\r\n      label={label}\r\n      placeholder={placeholder}\r\n      type={showPassword ? \"text\" : \"password\"}\r\n    >\r\n      <InputGroup>\r\n        <InputRightElement width=\"3rem\"></InputRightElement>\r\n      </InputGroup>\r\n    </FormInput>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}