{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/components/FormInput.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FormControl, FormLabel, Input, FormErrorMessage, InputGroup, Button, Icon, InputRightElement, Box } from \"@chakra-ui/react\";\nimport { Field } from \"formik\";\nimport React, { useState } from \"react\";\nimport { ViewOffIcon } from \"@chakra-ui/icons\";\n\nconst FormWrapper = ({\n  children\n}) => /*#__PURE__*/_jsxDEV(Box, {\n  mb: \"2em\",\n  children: children\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 39\n}, this);\n\nexport const FormInput = ({\n  name,\n  label,\n  placeholder,\n  type\n}) => /*#__PURE__*/_jsxDEV(FormWrapper, {\n  children: /*#__PURE__*/_jsxDEV(Field, {\n    name: name,\n    children: ({\n      field,\n      form\n    }) => /*#__PURE__*/_jsxDEV(FormControl, {\n      isInvalid: form.errors[name] && form.touched[name],\n      children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n        htmlFor: name,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread({}, field), {}, {\n        type: type,\n        id: name,\n        placeholder: placeholder\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n        children: form.errors[name]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 26,\n  columnNumber: 3\n}, this);\nexport const FormInputPassword = ({\n  name,\n  label,\n  placeholder,\n  type\n}) => {\n  const {\n    0: showPassword,\n    1: setShowPassword\n  } = useState(false);\n\n  const handlePasswordVisibility = () => setShowPassword(prevState => !prevState);\n\n  return /*#__PURE__*/_jsxDEV(Field, {\n    name: name,\n    children: ({\n      field,\n      form\n    }) => /*#__PURE__*/_jsxDEV(FormControl, {\n      isInvalid: form.errors[name] && form.touched[name],\n      children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n        htmlFor: name,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread({}, field), {}, {\n          type: showPassword ? \"text\" : \"password\",\n          id: name,\n          placeholder: placeholder\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(InputRightElement, {\n          width: \"3rem\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            h: \"1.5rem\",\n            size: \"sm\",\n            onClick: handlePasswordVisibility,\n            children: showPassword ? /*#__PURE__*/_jsxDEV(Icon, {\n              as: ViewOffIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Icon, {\n              as: ViewOffIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n        children: form.errors[name]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/components/FormInput.tsx"],"names":["FormControl","FormLabel","Input","FormErrorMessage","InputGroup","Button","Icon","InputRightElement","Box","Field","React","useState","ViewOffIcon","FormWrapper","children","FormInput","name","label","placeholder","type","field","form","errors","touched","FormInputPassword","showPassword","setShowPassword","handlePasswordVisibility","prevState"],"mappings":"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","sourcesContent":["import {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormErrorMessage,\r\n  InputGroup,\r\n  Button,\r\n  Icon,\r\n  InputRightElement,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { Field } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\r\n\r\ninterface Props {\r\n  name: string;\r\n  label: string;\r\n  placeholder: string;\r\n  type: string;\r\n}\r\n\r\nconst FormWrapper = ({ children }) => <Box mb={\"2em\"}>{children}</Box>;\r\n\r\nexport const FormInput = ({ name, label, placeholder, type }: Props) => (\r\n  <FormWrapper>\r\n    <Field name={name}>\r\n      {({ field, form }) => (\r\n        <FormControl isInvalid={form.errors[name] && form.touched[name]}>\r\n          <FormLabel htmlFor={name}>{label}</FormLabel>\r\n          <Input {...field} type={type} id={name} placeholder={placeholder} />\r\n          <FormErrorMessage>{form.errors[name]}</FormErrorMessage>\r\n        </FormControl>\r\n      )}\r\n    </Field>\r\n  </FormWrapper>\r\n);\r\n\r\nexport const FormInputPassword = ({\r\n  name,\r\n  label,\r\n  placeholder,\r\n  type,\r\n}: Props) => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const handlePasswordVisibility = () =>\r\n    setShowPassword((prevState) => !prevState);\r\n  return (\r\n    <Field name={name}>\r\n      {({ field, form }) => (\r\n        <FormControl isInvalid={form.errors[name] && form.touched[name]}>\r\n          <FormLabel htmlFor={name}>{label}</FormLabel>\r\n\r\n          <InputGroup>\r\n            <Input\r\n              {...field}\r\n              type={showPassword ? \"text\" : \"password\"}\r\n              id={name}\r\n              placeholder={placeholder}\r\n            />\r\n            <InputRightElement width=\"3rem\">\r\n              <Button h=\"1.5rem\" size=\"sm\" onClick={handlePasswordVisibility}>\r\n                {showPassword ? (\r\n                  <Icon as={ViewOffIcon} />\r\n                ) : (\r\n                  <Icon as={ViewOffIcon} />\r\n                )}\r\n              </Button>\r\n            </InputRightElement>\r\n          </InputGroup>\r\n          <FormErrorMessage>{form.errors[name]}</FormErrorMessage>\r\n        </FormControl>\r\n      )}\r\n    </Field>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}