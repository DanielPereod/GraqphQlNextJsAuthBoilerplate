{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const GoogleLoginDocument = gql`\n    mutation GoogleLogin($username: String, $email: String, $password: String!) {\n  googleLogin(username: $username, email: $email, password: $password) {\n    token\n    errors {\n      field\n      message\n    }\n  }\n}\n    `;\nexport function useGoogleLoginMutation() {\n  return Urql.useMutation(GoogleLoginDocument);\n}\n;\nexport const RegisterDocument = gql`\n    mutation Register($username: String, $email: String, $password: String!) {\n  register(username: $username, email: $email, password: $password) {\n    token\n    errors {\n      field\n      message\n    }\n  }\n}\n    `;\nexport function useRegisterMutation() {\n  return Urql.useMutation(RegisterDocument);\n}\n;\nexport const LoginDocument = gql`\n    query Login($username: String, $email: String, $password: String!) {\n  login(username: $username, email: $email, password: $password) {\n    token\n    errors {\n      field\n      message\n    }\n  }\n}\n    `;\nexport function useLoginQuery(options = {}) {\n  return Urql.useQuery(_objectSpread({\n    query: LoginDocument\n  }, options));\n}\n;","map":{"version":3,"sources":["/mnt/c/Users/Daniel/Code/Projects/GraqphQlNextJsAuthBoilerplate/web/graphql/generated.tsx"],"names":["gql","Urql","GoogleLoginDocument","useGoogleLoginMutation","useMutation","RegisterDocument","useRegisterMutation","LoginDocument","useLoginQuery","options","useQuery","query"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAkIA,OAAO,MAAMC,mBAAmB,GAAGF,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAVO;AAYP,OAAO,SAASG,sBAAT,GAAkC;AACvC,SAAOF,IAAI,CAACG,WAAL,CAAoEF,mBAApE,CAAP;AACD;AAAA;AACD,OAAO,MAAMG,gBAAgB,GAAGL,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAVO;AAYP,OAAO,SAASM,mBAAT,GAA+B;AACpC,SAAOL,IAAI,CAACG,WAAL,CAA8DC,gBAA9D,CAAP;AACD;AAAA;AACD,OAAO,MAAME,aAAa,GAAGP,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAVO;AAYP,OAAO,SAASQ,aAAT,CAAuBC,OAA8D,GAAG,EAAxF,EAA4F;AACjG,SAAOR,IAAI,CAACS,QAAL;AAA4BC,IAAAA,KAAK,EAAEJ;AAAnC,KAAqDE,OAArD,EAAP;AACD;AAAA","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  refreshToken: TokenResponse;\n  login: UserToken;\n};\n\n\nexport type QueryLoginArgs = {\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  password: Scalars['String'];\n};\n\nexport type TokenResponse = {\n  __typename?: 'TokenResponse';\n  success: Scalars['Boolean'];\n  accessToken: Scalars['String'];\n};\n\nexport type UserToken = {\n  __typename?: 'UserToken';\n  token?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<UserError>>;\n};\n\nexport type UserError = {\n  __typename?: 'UserError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  revokeRefreshTokenForUser: Scalars['Boolean'];\n  register: UserToken;\n  googleLogin: UserToken;\n};\n\n\nexport type MutationRevokeRefreshTokenForUserArgs = {\n  userId: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  password: Scalars['String'];\n};\n\n\nexport type MutationGoogleLoginArgs = {\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  password: Scalars['String'];\n};\n\nexport type GoogleLoginMutationVariables = Exact<{\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  password: Scalars['String'];\n}>;\n\n\nexport type GoogleLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { googleLogin: (\n    { __typename?: 'UserToken' }\n    & Pick<UserToken, 'token'>\n    & { errors?: Maybe<Array<(\n      { __typename?: 'UserError' }\n      & Pick<UserError, 'field' | 'message'>\n    )>> }\n  ) }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  password: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserToken' }\n    & Pick<UserToken, 'token'>\n    & { errors?: Maybe<Array<(\n      { __typename?: 'UserError' }\n      & Pick<UserError, 'field' | 'message'>\n    )>> }\n  ) }\n);\n\nexport type LoginQueryVariables = Exact<{\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginQuery = (\n  { __typename?: 'Query' }\n  & { login: (\n    { __typename?: 'UserToken' }\n    & Pick<UserToken, 'token'>\n    & { errors?: Maybe<Array<(\n      { __typename?: 'UserError' }\n      & Pick<UserError, 'field' | 'message'>\n    )>> }\n  ) }\n);\n\n\nexport const GoogleLoginDocument = gql`\n    mutation GoogleLogin($username: String, $email: String, $password: String!) {\n  googleLogin(username: $username, email: $email, password: $password) {\n    token\n    errors {\n      field\n      message\n    }\n  }\n}\n    `;\n\nexport function useGoogleLoginMutation() {\n  return Urql.useMutation<GoogleLoginMutation, GoogleLoginMutationVariables>(GoogleLoginDocument);\n};\nexport const RegisterDocument = gql`\n    mutation Register($username: String, $email: String, $password: String!) {\n  register(username: $username, email: $email, password: $password) {\n    token\n    errors {\n      field\n      message\n    }\n  }\n}\n    `;\n\nexport function useRegisterMutation() {\n  return Urql.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument);\n};\nexport const LoginDocument = gql`\n    query Login($username: String, $email: String, $password: String!) {\n  login(username: $username, email: $email, password: $password) {\n    token\n    errors {\n      field\n      message\n    }\n  }\n}\n    `;\n\nexport function useLoginQuery(options: Omit<Urql.UseQueryArgs<LoginQueryVariables>, 'query'> = {}) {\n  return Urql.useQuery<LoginQuery>({ query: LoginDocument, ...options });\n};"]},"metadata":{},"sourceType":"module"}