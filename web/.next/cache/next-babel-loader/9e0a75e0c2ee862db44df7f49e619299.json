{"ast":null,"code":"import _defineProperty from \"/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/pages/register.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, Button, FormControl, FormErrorMessage, FormLabel, Input } from \"@chakra-ui/react\";\nimport { Formik, Form, Field } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport React from \"react\";\nimport { useRegisterMutation } from \"../graphql/generated\";\nimport { clientOptions } from \"../utils/createClient\";\n\nvar Register = function Register(props) {\n  _s();\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 2),\n      fetching = _useRegisterMutation2[0].fetching,\n      register = _useRegisterMutation2[1];\n\n  var sendData = function sendData() {};\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        username: \"\",\n        email: \"\",\n        password: \"\"\n      },\n      onSubmit: function onSubmit(values, _ref) {\n        var setSubmitting = _ref.setSubmitting;\n        register();\n      },\n      children: function children(props) {\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            name: \"username\",\n            children: function children(_ref2) {\n              var field = _ref2.field,\n                  form = _ref2.form;\n              return /*#__PURE__*/_jsxDEV(FormControl, {\n                isInvalid: form.errors.name && form.touched.name,\n                children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                  htmlFor: \"username\",\n                  children: \"First name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread({}, field), {}, {\n                  id: \"username\",\n                  placeholder: \"Username\"\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n                  children: form.errors.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 17\n              }, _this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            mt: 4,\n            colorScheme: \"teal\",\n            isLoading: props.isSubmitting,\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Register, \"Fpy0yKt5YU/ZtTJE/CW2nuxdzDA=\", false, function () {\n  return [useRegisterMutation];\n});\n\n_c = Register;\nexport default withUrqlClient(clientOptions, {\n  ssr: false\n})(Register);\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/pages/register.tsx"],"names":["Box","Button","FormControl","FormErrorMessage","FormLabel","Input","Formik","Form","Field","withUrqlClient","React","useRegisterMutation","clientOptions","Register","props","fetching","register","sendData","username","email","password","values","setSubmitting","field","form","errors","name","touched","isSubmitting","ssr"],"mappings":";;;;;;;;;;;;AAAA,SACEA,GADF,EAEEC,MAFF,EAGEC,WAHF,EAIEC,gBAJF,EAKEC,SALF,EAMEC,KANF,QAOO,kBAPP;AAQA,SAASC,MAAT,EAAgCC,IAAhC,EAAsCC,KAAtC,QAAmD,QAAnD;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,aAAT,QAA8B,uBAA9B;;AAUA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAkB;AAAA;;AAAA,6BACAH,mBAAmB,EADnB;AAAA;AAAA,MACxBI,QADwB,4BACxBA,QADwB;AAAA,MACZC,QADY;;AAEjC,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM,CAAE,CAAzB;;AACA,sBACE,QAAC,GAAD;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AACbC,QAAAA,QAAQ,EAAE,EADG;AAEbC,QAAAA,KAAK,EAAE,EAFM;AAGbC,QAAAA,QAAQ,EAAE;AAHG,OADjB;AAME,MAAA,QAAQ,EAAE,kBACRC,MADQ,QAGL;AAAA,YADDC,aACC,QADDA,aACC;AACHN,QAAAA,QAAQ;AACT,OAXH;AAAA,gBAaG,kBAACF,KAAD;AAAA,4BACC,QAAC,IAAD;AAAA,kCACE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,UAAZ;AAAA,sBACG;AAAA,kBAAGS,KAAH,SAAGA,KAAH;AAAA,kBAAUC,IAAV,SAAUA,IAAV;AAAA,kCACC,QAAC,WAAD;AAAa,gBAAA,SAAS,EAAEA,IAAI,CAACC,MAAL,CAAYC,IAAZ,IAAoBF,IAAI,CAACG,OAAL,CAAaD,IAAzD;AAAA,wCACE,QAAC,SAAD;AAAW,kBAAA,OAAO,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE,QAAC,KAAD,kCAAWH,KAAX;AAAkB,kBAAA,EAAE,EAAC,UAArB;AAAgC,kBAAA,WAAW,EAAC;AAA5C;AAAA;AAAA;AAAA;AAAA,yBAFF,eAGE,QAAC,gBAAD;AAAA,4BAAmBC,IAAI,CAACC,MAAL,CAAYC;AAA/B;AAAA;AAAA;AAAA;AAAA,yBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,uBADD;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,mBADF,eAUE,QAAC,MAAD;AACE,YAAA,EAAE,EAAE,CADN;AAEE,YAAA,WAAW,EAAC,MAFd;AAGE,YAAA,SAAS,EAAEZ,KAAK,CAACc,YAHnB;AAIE,YAAA,IAAI,EAAC,QAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD;AAAA;AAbH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAuCD,CA1CD;;GAAMf,Q;UAC6BF,mB;;;KAD7BE,Q;AA4CN,eAAeJ,cAAc,CAACG,aAAD,EAAgB;AAAEiB,EAAAA,GAAG,EAAE;AAAP,CAAhB,CAAd,CAA8ChB,QAA9C,CAAf","sourcesContent":["import {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormLabel,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nimport { Formik, FormikHelpers, Form, Field } from \"formik\";\r\nimport { withUrqlClient } from \"next-urql\";\r\nimport React from \"react\";\r\nimport { useRegisterMutation } from \"../graphql/generated\";\r\nimport { clientOptions } from \"../utils/createClient\";\r\n\r\ninterface Props {}\r\n\r\ninterface RegisterValues {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst Register = (props: Props) => {\r\n  const [{ fetching }, register] = useRegisterMutation();\r\n  const sendData = () => {};\r\n  return (\r\n    <Box>\r\n      <Formik\r\n        initialValues={{\r\n          username: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n        }}\r\n        onSubmit={(\r\n          values: RegisterValues,\r\n          { setSubmitting }: FormikHelpers<RegisterValues>\r\n        ) => {\r\n          register();\r\n        }}\r\n      >\r\n        {(props) => (\r\n          <Form>\r\n            <Field name=\"username\">\r\n              {({ field, form }) => (\r\n                <FormControl isInvalid={form.errors.name && form.touched.name}>\r\n                  <FormLabel htmlFor=\"username\">First name</FormLabel>\r\n                  <Input {...field} id=\"username\" placeholder=\"Username\" />\r\n                  <FormErrorMessage>{form.errors.name}</FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <Button\r\n              mt={4}\r\n              colorScheme=\"teal\"\r\n              isLoading={props.isSubmitting}\r\n              type=\"submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default withUrqlClient(clientOptions, { ssr: false })(Register);\r\n"]},"metadata":{},"sourceType":"module"}