{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/c/Users/Daniel/Code/Projects/GraqphQlNextJsAuthBoilerplate/web/pages/auth/login.tsx\";\nimport { Box, Button, Link, Text } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { FormInput, FormInputPassword } from \"../../components/FormInput\";\nimport { AuthFormLayout } from \"../../components/layouts/authFormLayout\";\nimport { validatePassword } from \"../../components/validations/validateUsername\";\nimport { useLoginMutation } from \"../../graphql/generated\";\nimport { clientOptions } from \"../../utils/createClient\";\n\nconst Login = () => {\n  const [{\n    fetching\n  }, login] = useLoginMutation();\n  const router = useRouter();\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      usernameOrEmail: \"\",\n      password: \"\"\n    },\n    onSubmit: async (values, {\n      setSubmitting\n    }) => {\n      try {\n        await login({\n          username: values.usernameOrEmail,\n          email: values.usernameOrEmail,\n          password: values.password\n        });\n        router.push(\"/\");\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    children: ({\n      isSubmitting,\n      values\n    }) => /*#__PURE__*/_jsxDEV(AuthFormLayout, {\n      title: \"Registro\",\n      type: \"signup\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FormInput, {\n          name: \"usernameOrEmail\",\n          type: \"text\",\n          label: \"Usuario o email\",\n          placeholder: \"Inserta tu usuario o email\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormInputPassword, {\n          name: \"password\",\n          type: \"password\",\n          label: \"Contrase\\xF1a\",\n          placeholder: \"Inserta tu contrase\\xF1a\",\n          required: true,\n          validation: validatePassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          w: \"100%\",\n          textAlign: \"right\",\n          mb: \"1em\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              variant: \"smallText\",\n              children: \"No tienes cuenta?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"xl\",\n          mt: 4,\n          isFullWidth: true,\n          isLoading: isSubmitting,\n          type: \"submit\",\n          children: \"Crear cuenta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withUrqlClient(clientOptions, {\n  ssr: false\n})(Login);","map":{"version":3,"sources":["/mnt/c/Users/Daniel/Code/Projects/GraqphQlNextJsAuthBoilerplate/web/pages/auth/login.tsx"],"names":["Box","Button","Link","Text","Form","Formik","withUrqlClient","useRouter","React","FormInput","FormInputPassword","AuthFormLayout","validatePassword","useLoginMutation","clientOptions","Login","fetching","login","router","usernameOrEmail","password","values","setSubmitting","username","email","push","error","console","log","isSubmitting","ssr"],"mappings":"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","sourcesContent":["import { Box, Button, Link, Text } from \"@chakra-ui/react\";\r\nimport { Form, Formik, FormikHelpers } from \"formik\";\r\nimport { withUrqlClient } from \"next-urql\";\r\nimport { useRouter } from \"next/router\";\r\nimport React from \"react\";\r\nimport { FormInput, FormInputPassword } from \"../../components/FormInput\";\r\nimport { AuthFormLayout } from \"../../components/layouts/authFormLayout\";\r\nimport {\r\n  validateEmail,\r\n  validatePassword,\r\n  validatePasswordRepeat,\r\n  validateUsername,\r\n} from \"../../components/validations/validateUsername\";\r\nimport { useLoginMutation } from \"../../graphql/generated\";\r\nimport { clientOptions } from \"../../utils/createClient\";\r\n\r\ninterface RegisterValues {\r\n  usernameOrEmail: string;\r\n  password: string;\r\n}\r\n\r\nconst Login = () => {\r\n  const [{ fetching }, login] = useLoginMutation();\r\n  const router = useRouter();\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        usernameOrEmail: \"\",\r\n        password: \"\",\r\n      }}\r\n      onSubmit={async (\r\n        values: RegisterValues,\r\n        { setSubmitting }: FormikHelpers<RegisterValues>\r\n      ) => {\r\n        try {\r\n          await login({\r\n            username: values.usernameOrEmail,\r\n            email: values.usernameOrEmail,\r\n            password: values.password,\r\n          });\r\n          router.push(\"/\");\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }}\r\n    >\r\n      {({ isSubmitting, values }) => (\r\n        <AuthFormLayout title=\"Registro\" type=\"signup\">\r\n          <Form>\r\n            <FormInput\r\n              name=\"usernameOrEmail\"\r\n              type=\"text\"\r\n              label=\"Usuario o email\"\r\n              placeholder=\"Inserta tu usuario o email\"\r\n              required={true}\r\n            />\r\n\r\n            <FormInputPassword\r\n              name=\"password\"\r\n              type=\"password\"\r\n              label=\"Contraseña\"\r\n              placeholder=\"Inserta tu contraseña\"\r\n              required={true}\r\n              validation={validatePassword}\r\n            />\r\n\r\n            <Box w=\"100%\" textAlign=\"right\" mb=\"1em\">\r\n              <Link>\r\n                <Text variant=\"smallText\">{\"No tienes cuenta?\"}</Text>\r\n              </Link>\r\n            </Box>\r\n\r\n            <Button\r\n              size=\"xl\"\r\n              mt={4}\r\n              isFullWidth\r\n              isLoading={isSubmitting}\r\n              type=\"submit\"\r\n            >\r\n              Crear cuenta\r\n            </Button>\r\n          </Form>\r\n        </AuthFormLayout>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default withUrqlClient(clientOptions, { ssr: false })(Login);\r\n"]},"metadata":{},"sourceType":"module"}