{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport const RegisterDocument = gql`\n    mutation Register($username: String, $email: String, $password: String!) {\n  register(username: $username, email: $email, password: $password) {\n    token\n    errors {\n      field\n      message\n    }\n  }\n}\n    `;\nexport function useRegisterMutation() {\n  return Urql.useMutation(RegisterDocument);\n}\n;","map":{"version":3,"sources":["/mnt/c/Users/Daniel/Code/Projects/LuxSite/web/graphql/generated.tsx"],"names":["gql","Urql","RegisterDocument","useRegisterMutation","useMutation"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAoFA,OAAO,MAAMC,gBAAgB,GAAGF,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAVO;AAYP,OAAO,SAASG,mBAAT,GAA+B;AACpC,SAAOF,IAAI,CAACG,WAAL,CAA8DF,gBAA9D,CAAP;AACD;AAAA","sourcesContent":["import gql from 'graphql-tag';\nimport * as Urql from 'urql';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  refreshToken: TokenResponse;\n  login: UserToken;\n};\n\n\nexport type QueryLoginArgs = {\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  password: Scalars['String'];\n};\n\nexport type TokenResponse = {\n  __typename?: 'TokenResponse';\n  success: Scalars['Boolean'];\n  accessToken: Scalars['String'];\n};\n\nexport type UserToken = {\n  __typename?: 'UserToken';\n  token?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<UserError>>;\n};\n\nexport type UserError = {\n  __typename?: 'UserError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  revokeRefreshTokenForUser: Scalars['Boolean'];\n  register: UserToken;\n};\n\n\nexport type MutationRevokeRefreshTokenForUserArgs = {\n  userId: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  password: Scalars['String'];\n};\n\nexport type RegisterMutationVariables = Exact<{\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  password: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'UserToken' }\n    & Pick<UserToken, 'token'>\n    & { errors?: Maybe<Array<(\n      { __typename?: 'UserError' }\n      & Pick<UserError, 'field' | 'message'>\n    )>> }\n  ) }\n);\n\n\nexport const RegisterDocument = gql`\n    mutation Register($username: String, $email: String, $password: String!) {\n  register(username: $username, email: $email, password: $password) {\n    token\n    errors {\n      field\n      message\n    }\n  }\n}\n    `;\n\nexport function useRegisterMutation() {\n  return Urql.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument);\n};"]},"metadata":{},"sourceType":"module"}